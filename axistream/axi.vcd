$date
	Sat Feb 11 12:13:54 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module axififotb $end
$var wire 32 ! m_tdata [31:0] $end
$var wire 1 " m_tlast $end
$var reg 1 # m_aclk $end
$var reg 1 $ m_areset_n $end
$var reg 1 % m_tready $end
$var reg 1 & m_tvalid $end
$var reg 1 ' ren $end
$var reg 1 ( s_aclk $end
$var reg 1 ) s_areset_n $end
$var reg 32 * s_tdata [31:0] $end
$var reg 1 + s_tlast $end
$var reg 1 , s_tready $end
$var reg 1 - s_tvalid $end
$var reg 1 . wen $end
$scope module fifo $end
$var wire 1 # m_aclk $end
$var wire 1 $ m_areset_n $end
$var wire 32 / m_tdata [31:0] $end
$var wire 34 0 m_tdata_int [33:0] $end
$var wire 1 % m_tready $end
$var wire 1 1 m_tvalid $end
$var wire 1 ( s_aclk $end
$var wire 1 ) s_areset_n $end
$var wire 32 2 s_tdata [31:0] $end
$var wire 1 + s_tlast $end
$var wire 1 , s_tready $end
$var wire 1 3 s_tvalid $end
$var wire 1 4 s_full $end
$var wire 1 " m_tlast $end
$var wire 1 5 m_empty $end
$scope module fifo $end
$var wire 1 # rclk $end
$var wire 32 6 rdata [31:0] $end
$var wire 1 7 rinc $end
$var wire 1 $ rrst_n $end
$var wire 1 ( wclk $end
$var wire 32 8 wdata [31:0] $end
$var wire 1 9 winc $end
$var wire 1 ) wrst_n $end
$var wire 5 : wq2_rptr [4:0] $end
$var wire 5 ; wptr [4:0] $end
$var wire 1 4 wfull $end
$var wire 4 < waddr [3:0] $end
$var wire 5 = rq2_wptr [4:0] $end
$var wire 5 > rptr [4:0] $end
$var wire 1 5 rempty $end
$var wire 4 ? raddr [3:0] $end
$scope module fifomem $end
$var wire 32 @ rdata [31:0] $end
$var wire 1 ( wclk $end
$var wire 1 9 wclken $end
$var wire 32 A wdata [31:0] $end
$var wire 1 4 wfull $end
$var wire 4 B waddr [3:0] $end
$var wire 4 C raddr [3:0] $end
$upscope $end
$scope module rptr_empty $end
$var wire 1 # rclk $end
$var wire 5 D rgraynext [4:0] $end
$var wire 1 7 rinc $end
$var wire 1 $ rrst_n $end
$var wire 5 E rq2_wptr [4:0] $end
$var wire 1 F rempty_val $end
$var wire 5 G rbinnext [4:0] $end
$var wire 4 H raddr [3:0] $end
$var reg 5 I rbin [4:0] $end
$var reg 1 5 rempty $end
$var reg 5 J rptr [4:0] $end
$upscope $end
$scope module sync_r2w $end
$var wire 5 K rptr [4:0] $end
$var wire 1 ( wclk $end
$var wire 1 ) wrst_n $end
$var reg 5 L wq1_rptr [4:0] $end
$var reg 5 M wq2_rptr [4:0] $end
$upscope $end
$scope module sync_w2r $end
$var wire 1 # rclk $end
$var wire 1 $ rrst_n $end
$var wire 5 N wptr [4:0] $end
$var reg 5 O rq1_wptr [4:0] $end
$var reg 5 P rq2_wptr [4:0] $end
$upscope $end
$scope module wptr_full $end
$var wire 1 ( wclk $end
$var wire 5 Q wgraynext [4:0] $end
$var wire 1 9 winc $end
$var wire 5 R wq2_rptr [4:0] $end
$var wire 1 ) wrst_n $end
$var wire 1 S wfull_val $end
$var wire 5 T wbinnext [4:0] $end
$var wire 4 U waddr [3:0] $end
$var reg 5 V wbin [4:0] $end
$var reg 1 4 wfull $end
$var reg 5 W wptr [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task read $end
$upscope $end
$scope task write $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 W
b0 V
b0 U
bx T
xS
b0 R
bx Q
bx P
bx O
b0 N
b0 M
b0 L
bx K
bx J
bx I
bx H
bx G
xF
bx E
bx D
bx C
b0 B
b0 A
bx @
bx ?
bx >
bx =
b0 <
b0 ;
b0 :
x9
b0 8
07
bx 6
x5
04
x3
b0 2
x1
bz 0
bx /
x.
0-
x,
x+
b0 *
0)
0(
x'
x&
0%
x$
0#
z"
bx !
$end
#5
1(
#10
1F
b0 ?
b0 C
b0 H
b0 D
b0 =
b0 E
b0 P
b0 O
b0 G
b0 I
b0 >
b0 J
b0 K
15
0#
0$
0)
#15
0(
#20
1#
1$
#25
0S
b1 Q
b1 T
b10010000101010011010100100100 8
b10010000101010011010100100100 A
19
b10010000101010011010100100100 *
b10010000101010011010100100100 2
1,
13
1-
1.
1(
#30
0#
#35
0(
#40
1#
#45
b10010000101010011010100100100 !
b10010000101010011010100100100 /
b10010000101010011010100100100 6
b10010000101010011010100100100 @
xS
bx Q
bx T
x9
0.
x3
0-
1(
#50
0#
#55
0(
#60
1#
#65
0S
b1 Q
b1 T
b11000000100010010101111010000001 8
b11000000100010010101111010000001 A
19
bx0x00x0x00xxx010xx1x1xxx0x00x0x !
bx0x00x0x00xxx010xx1x1xxx0x00x0x /
bx0x00x0x00xxx010xx1x1xxx0x00x0x 6
bx0x00x0x00xxx010xx1x1xxx0x00x0x @
b11000000100010010101111010000001 *
b11000000100010010101111010000001 2
13
1-
1.
1(
#70
0#
#75
0(
#80
1#
#85
b11000000100010010101111010000001 !
b11000000100010010101111010000001 /
b11000000100010010101111010000001 6
b11000000100010010101111010000001 @
xS
bx Q
bx T
x9
0.
x3
0-
1(
#90
0#
#95
0(
#100
1#
#105
0S
b1 Q
b1 T
b10000100100001001101011000001001 8
b10000100100001001101011000001001 A
19
b1x000x001000xx0xx101x110x000x001 !
b1x000x001000xx0xx101x110x000x001 /
b1x000x001000xx0xx101x110x000x001 6
b1x000x001000xx0xx101x110x000x001 @
b10000100100001001101011000001001 *
b10000100100001001101011000001001 2
13
1-
1.
1(
#110
0#
#115
0(
#120
1#
#125
b10000100100001001101011000001001 !
b10000100100001001101011000001001 /
b10000100100001001101011000001001 6
b10000100100001001101011000001001 @
xS
bx Q
bx T
x9
0.
x3
0-
1(
#130
0#
#135
0(
#140
1#
#145
0S
b1 Q
b1 T
b10110001111100000101011001100011 8
b10110001111100000101011001100011 A
19
b10xx0x0x1xxx0x00x10101100xx0x0x1 !
b10xx0x0x1xxx0x00x10101100xx0x0x1 /
b10xx0x0x1xxx0x00x10101100xx0x0x1 6
b10xx0x0x1xxx0x00x10101100xx0x0x1 @
b10110001111100000101011001100011 *
b10110001111100000101011001100011 2
13
1-
1.
1(
#150
0#
#155
0(
#160
1#
#165
b10110001111100000101011001100011 !
b10110001111100000101011001100011 /
b10110001111100000101011001100011 6
b10110001111100000101011001100011 @
xS
bx Q
bx T
x9
1+
0.
x3
0-
1(
#170
0#
#175
0(
#180
1#
#185
1(
#190
0#
#195
0(
#200
1#
#205
1(
#210
0#
#215
0(
#220
x7
1&
1%
1'
1#
#225
1(
#230
0#
#235
0(
#240
07
0%
1#
#245
1(
#250
0#
#255
0(
#260
x7
1%
1#
#265
1(
#270
0#
#275
0(
#280
07
0%
1#
#285
1(
#290
0#
#295
0(
#300
x7
1%
1#
#305
1(
#310
0#
#315
0(
#320
07
0%
1#
#325
1(
#330
0#
#335
0(
#340
x7
1%
1#
#345
1(
#350
0#
#355
0(
#360
07
0%
1#
#365
1(
#370
0#
#375
0(
#380
1#
#385
1(
#390
0#
#395
0(
#400
1#
#405
1(
#410
0#
#415
0(
#420
1#
#425
1(
#430
0#
#435
0(
#440
1#
#445
1(
#450
0#
#455
0(
#460
1#
